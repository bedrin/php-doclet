{"name":"Php-doclet","tagline":"Annotations support for PHP","body":"php-doclet\r\n==========\r\n\r\nphp-doclet provides annotations support to PHP 5.1+ similar to Java 1.5\r\n\r\nLets define some annotations on Person class\r\n```php\r\n/**\r\n * This class represents person instance in the system\r\n *\r\n * @author Dmitry Bedrin mailto:Bedrin@msn.com\r\n */\r\nclass Person extends AnnotatedClass {\r\n\r\n    /**\r\n     * First name\r\n     *\r\n     * @var string\r\n     * @validator.required\r\n     * @validator.maxlength 20\r\n     */\r\n    public $firstName;\r\n\r\n    /**\r\n     * Last name\r\n     *\r\n     * @var string\r\n     * @validator.required\r\n     * @validator.maxlength 20\r\n     */\r\n    public $lastName;\r\n\r\n    /**\r\n     * Description of the person\r\n     *\r\n     * @var string\r\n     * @validator.maxlength 50\r\n     */\r\n    public $description;\r\n\r\n}\r\n```\r\n\r\nNow we can write a simple validator which will use these annotations\r\n```php\r\n/**\r\n * Validator class enables validate {@link AnnotatedClass} ancestors\r\n * by given annotations.\r\n *\r\n * Currently  implemented @validator.required and @validator.maxlength\r\n *\r\n * @author Dmitry Bedrin mailto:Bedrin@msn.com\r\n */\r\nclass Validator {\r\n\r\n    /**\r\n     * Validates {@link AnnotatedClass} ancestor\r\n     *\r\n     * @param AnnotatedClass $object\r\n     * @return array\r\n     */\r\n    public function validate(AnnotatedClass $object) {\r\n        $errorFields = array();\r\n        $annotation = $object->getAnnotation();\r\n        foreach ($annotation->getPropertyAnnotationsIterator() as $propertyAnnotation) {\r\n            foreach ($propertyAnnotation->getAnnotationTagsIterator() as $annotationTag) {\r\n\r\n                if ('validator.required' == $annotationTag->getName()) {\r\n                    if (!$this->validateRequired($object,$propertyAnnotation->getName())) {\r\n                        $errorFields[] = array($propertyAnnotation->getName(),'is required');\r\n                    }\r\n                }\r\n\r\n                elseif ('validator.maxlength' == $annotationTag->getName()) {\r\n                    if (!$this->validateMaxLength($object,$propertyAnnotation->getName(),$annotationTag->getValue())) {\r\n                        $errorFields[] = array($propertyAnnotation->getName(),'maxlength exceeded');\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return $errorFields;\r\n    }\r\n\r\n    /**\r\n     * Required validation\r\n     *\r\n     * @param AnnotatedClass $object\r\n     * @param string $propertyName\r\n     * @return bool\r\n     */\r\n    private function validateRequired(AnnotatedClass $object,$propertyName) {\r\n        if (empty($object->$propertyName)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Max length validation\r\n     *\r\n     * @param AnnotatedClass $object\r\n     * @param string $propertyName\r\n     * @param int $maxLength\r\n     * @return boolean\r\n     */\r\n    private function validateMaxLength(AnnotatedClass $object,$propertyName,$maxLength) {\r\n        if (!empty($object->$propertyName)) {\r\n            $value = $object->$propertyName;\r\n            return (strlen($value) <= $maxLength);\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n// This Person instance should fail on lastName and description fields assertion\r\n$person = new Person();\r\n$person->firstName = 'Vasya';\r\n$person->description = 'Hi! I am Vasya Pupkin and I forgot to fill in my last name. Suppose it will raise an error in Validator';\r\n\r\n$validator = new Validator();\r\n$person1ValidationErrors = $validator->validate($person);\r\n\r\n// This person should pass validation successfully\r\n$person = new Person();\r\n$person->firstName = 'Vasya';\r\n$person->lastName = 'Pupkin';\r\n\r\n$validator = new Validator();\r\n$person2ValidationErrors = $validator->validate($person);\r\n\r\n// Outputing results\r\necho '<h1>Person 1 validation results:</h1>';\r\nif (empty($person1ValidationErrors)) {\r\n    echo 'OK';\r\n}\r\nelse {\r\n    foreach ($person1ValidationErrors as $error) {\r\n        echo join(' ', $error) . '<br/>';\r\n    }\r\n}\r\n\r\necho '<h1>Person 2 validation results:</h1>';\r\nif (empty($person2ValidationErrors)) {\r\n    echo 'OK';\r\n}\r\nelse {\r\n    foreach ($person2ValidationErrors as $error) {\r\n        echo join(' ', $error) . '<br/>';\r\n    }\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}